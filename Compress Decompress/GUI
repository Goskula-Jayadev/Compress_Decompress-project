/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package GUI;


import Codefiles.Compress;
import Codefiles.Decompress;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author jayad
 */
public class View extends JFrame implements ActionListener {
  //action listener is used inorder to add a component to capture action and perform some action when the component is clicked.    
//    JFrame frame;
    JButton compressButton;
    JButton decompressButton;
    JButton browse;
    JTextField jtext;
    File filepathintext=null;
    String extension=null;
    JLabel label;
    
    public View(){
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//close upon pressing cross button on frame.
    this.setLayout(null);//no predefined layout I will arrange my things on own.
    //label = new JLabel("");
    //label.setBounds(WIDTH, WIDTH, WIDTH, HEIGHT);
    
    
    browse = new JButton("Browse");
    browse.addActionListener(this);
    browse.setBounds(365, 53, 100, 23);
    //label.setFont(new Font("Calibri",Font.BOLD,17));
    //label.setForeground(Color.BLACK);
    
    jtext = new JTextField("");
    jtext.setBounds(10,54,350,20);
    jtext.setFont(new Font("Calibri",Font.BOLD,15));
    
    
    compressButton = new JButton("Compress");
    compressButton.addActionListener(this);
    compressButton.setBounds(10, 100, 200, 30);
    
    decompressButton = new JButton("Decompress");
    decompressButton.addActionListener(this);
    decompressButton.setBounds(266, 100, 200, 30);
    
    //this.add(select); adding components to the jframe
    this.add(compressButton);
    this.add(decompressButton);
    this.add(jtext);
    this.add(browse);
    this.getContentPane().setBackground(Color.LIGHT_GRAY);
    //setLocationRelativeTo(null);
    this.setSize(500,200);
    this.setLocationRelativeTo(null);//set window to center
    }
    @Override //for readablity purpose only
    public void actionPerformed(ActionEvent e){
        if(e.getSource()==browse){
        JFileChooser fileChooser = new JFileChooser(); //fie directory
        int response = fileChooser.showOpenDialog(null);//no parent frame use default one
        if(response == JFileChooser.APPROVE_OPTION){
            filepathintext = new File(fileChooser.getSelectedFile().getAbsolutePath());
            String fileName = filepathintext.toString();
            System.err.println(filepathintext);
            int index = fileName.lastIndexOf('.');
            if(index > 0) {
            extension = fileName.substring(index + 1);
            }
            jtext.setText(filepathintext.toString());
            jtext.setCaretPosition(0);
        }
        }
      if(e.getSource()==compressButton){ 
          boolean flag=false;
          if(jtext.getText()!=null){filepathintext=new File(jtext.getText()); flag=true;
          String fileName = filepathintext.toString();
            int index = fileName.lastIndexOf('.');
            if(index > 0) {
            extension = fileName.substring(index + 1);
            }
            jtext.setText(filepathintext.toString());
            jtext.setCaretPosition(0);
          }
          if(flag==true){
            try {
            Compress.method(filepathintext,extension);
            } 
            catch (Exception ex) {
                JOptionPane.showMessageDialog(null,ex.toString());
            }
        }
      }
      
    if(e.getSource()==decompressButton){
        boolean flag=true,flag1=false;
        if(jtext.getText()!=null){filepathintext=new File(jtext.getText()); flag1=true;}
        if(flag1==true){
        String fileName = filepathintext.toString();
            int index = fileName.lastIndexOf('.');
            if(index > 0) {
            extension = fileName.substring(index + 1);
            }
           if(!"gz".equals(extension)){JOptionPane.showMessageDialog(null,"Select .gz files only");
           flag=false;
           }
        //System.out.print(file);
        if(flag){
            try {
            Decompress.method(filepathintext);
            } 
            catch (Exception ex) {
                JOptionPane.showMessageDialog(null,ex.toString());
            }
        }
        }
    }
    }
    
    public static void main(String args[]){
    View view = new View();
    view.setVisible(true);
    }
}
